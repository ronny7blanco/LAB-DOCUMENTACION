-- TRIGGER PARA TABLA PERSONA AGREGAR
CREATE OR REPLACE TRIGGER TG_PERSONA BEFORE INSERT 
ON PERSONAS 
FOR EACH ROW
BEGIN
  SELECT USER,SYSDATE INTO:NEW.USUARIO_CREO,:NEW.FECHA_CREO
  FROM DUAL;
END;

-- TRIGGER PARA UPDATE PERSONA
CREATE OR REPLACE TRIGGER TG_UPERSONA 
BEFORE UPDATE 
ON PERSONAS 
FOR EACH ROW
BEGIN
  SELECT USER,SYSDATE INTO:NEW.USUARIO_MODI,:NEW.FECHA_MODI
  FROM DUAL;
END;

-- PROCEDIMIENTO ALMACENADO PARA AGREGAR PERSONA
CREATE OR REPLACE PROCEDURE ADICIONA_PERSONA (ADUI IN VARCHAR, ANOMBRE IN VARCHAR2, AFECHA_NACIMIENTO IN DATE, AGENERO IN CHAR,
AE_MAIL IN VARCHAR2, ATELEFONO_CELULAR IN VARCHAR2, ATIPO_PERSONA IN VARCHAR2, AESTADO IN VARCHAR2, AROL_USUARIO IN VARCHAR2) AS
IMP VARCHAR2(30);
BEGIN
  INSERT INTO PERSONAS (DUI, NOMBRE, FECHA_NACIMIENTO, GENERO, E_MAIL, TELEFONO_CELULAR, TIPO_PERSONA, ESTADO, ROL_USUARIO) 
  VALUES (ADUI, ANOMBRE, AFECHA_NACIMIENTO, AGENERO, AE_MAIL, ATELEFONO_CELULAR, ATIPO_PERSONA, AESTADO, AROL_USUARIO);
  IMP := (SQL%ROWCOUNT||' REGISTRO INGRESADO');
  DBMS_OUTPUT.PUT_LINE(IMP);
EXCEPTION
  WHEN DUP_VAL_ON_INDEX THEN
    DBMS_OUTPUT.PUT_LINE('YA EXISTE UNA PERSONA CON ESE DUI');
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('ERROR AL INGRESAR REGISTRO');
END;

--ESTE SI FUNCIONA

EXECUTE ADICIONA_PERSONA('01056166-0', 'RONNY', '08-07-1994', 'M', 'ronny@gmail.com', '6157-6647', 'PACIENTE', 'ACTIVO', 'PA-01');
SELECT * FROM PERSONAS;

-- PROCEDIMIENTO ALMACENADO PARA MODIFICAR PERSONA
CREATE OR REPLACE PROCEDURE MODIFICA_PERSONA (MNOMBRE IN VARCHAR2, MFECHA_NACIMIENTO IN DATE, MGENERO IN CHAR,
ME_MAIL IN VARCHAR2, MTELEFONO_CELULAR IN VARCHAR2, MTIPO_PERSONA IN VARCHAR2, MESTADO IN VARCHAR2, MROL_USUARIO IN VARCHAR2, MDUI IN VARCHAR) 
AS
IMP VARCHAR2(30);
SIDS VARCHAR2(10);
BEGIN
  SELECT DUI INTO SIDS FROM PERSONAS WHERE DUI = MDUI;
    --DBMS_OUTPUT.PUT_LINE(SIDS);
  IF SIDS > MDUI THEN
    DBMS_OUTPUT.PUT_LINE('NO SE PUEDE ACTUALIZAR EL REGISTRO');
  ELSE
  UPDATE PERSONAS SET NOMBRE = MNOMBRE, FECHA_NACIMIENTO = MFECHA_NACIMIENTO, GENERO = MGENERO, E_MAIL = ME_MAIL, 
  TELEFONO_CELULAR = MTELEFONO_CELULAR, TIPO_PERSONA = MTIPO_PERSONA, ESTADO = MESTADO, ROL_USUARIO = MROL_USUARIO WHERE DUI = MDUI;
  IMP := (SQL%ROWCOUNT||' REGISTRO ACTULIZADO');
  DBMS_OUTPUT.PUT_LINE(IMP);
  END IF;
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('ERROR AL ACTUALIZAR REGISTRO, NO EXISTE EL DUI');
END;

SET SERVEROUTPUT ON
EXECUTE MODIFICA_PERSONA('JENNY1', '20-11-1994', 'F', 'jenny@gmail.com', '7947-4224', 'DOCTOR', 'ACTIVO', 'DOC-01', '01056166-');
SELECT * FROM PERSONAS;

-- PROCEDIMIENTO ALMACENADO PARA ELIMINAR PERSONA
CREATE OR REPLACE PROCEDURE ELIMINA_PERSONA (EDUI IN VARCHAR)
AS
IMP VARCHAR2(30);
BEGIN
  DELETE FROM PERSONAS WHERE DUI = EDUI;
  IMP := (SQL%ROWCOUNT||' REGISTRO ELIMINADO');
  DBMS_OUTPUT.PUT_LINE(IMP);
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('ERROR AL ELIMINAR REGISTRO');
END;

SET SERVEROUTPUT ON
-- EJECUTAR PROCEDIMIENTO
EXECUTE ADICIONA_PERSONA;
EXECUTE MODIFICA_PERSONA;
EXECUTE ELIMINA_PERSONA(&DUI);
SELECT * FROM PERSONAS

-- TRIGGER PARA TABLA TIPO EXAMEN AGREGAR
CREATE OR REPLACE TRIGGER TG_TIPOEXAMEN BEFORE INSERT 
ON TIPO_EXAMEN
FOR EACH ROW
BEGIN
  SELECT USER,SYSDATE INTO:NEW.USUARIO_CREO,:NEW.FECHA_CREO
  FROM DUAL;
END;

-- TRIGGER PARA TABLA TIPO EXAMEN MODIFICAR
CREATE OR REPLACE TRIGGER TG_UTIPOEXAMEN BEFORE UPDATE
ON TIPO_EXAMEN
FOR EACH ROW
BEGIN
  SELECT USER,SYSDATE INTO:NEW.USUARIO_MODI,:NEW.FECHA_MODI
  FROM DUAL;
END;

-- PROCEDIMIENTO ALMACENADO PARA AGREGAR TIPOEXAMEN
CREATE OR REPLACE PROCEDURE ADICIONA_TIPOEXAMEN (AIDTIPOEXAMEN IN NUMBER, ANOMBRE_EXAMEN VARCHAR2, AMUESTRA IN VARCHAR2, ADESCRIPCION IN VARCHAR2)
AS
IMP VARCHAR2(30);
BEGIN
  INSERT INTO TIPO_EXAMEN (IDTIPOEXAMEN, NOMBRE_EXAMEN, MUESTRA, DESCRIPCION) 
  VALUES (AIDTIPOEXAMEN, ANOMBRE_EXAMEN, AMUESTRA, ADESCRIPCION);
  IMP := (SQL%ROWCOUNT||' REGISTRO INGRESADO');
  DBMS_OUTPUT.PUT_LINE(IMP);
EXCEPTION
  WHEN DUP_VAL_ON_INDEX THEN
    DBMS_OUTPUT.PUT_LINE('NO SE PUEDE INSERTAR EL MISMO ID');
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('ERROR AL INGRESAR REGISTRO');
END;

EXECUTE ADICIONA_TIPOEXAMEN(1, 'ORINA', 'CULTIVO', 'EXAMEN DE ORINA CULTIVO');

SELECT * FROM TIPO_EXAMEN;

-- PROCEDIMIENTO ALMACENADO PARA MODIFICAR TIPO EXAMEN
CREATE OR REPLACE PROCEDURE MODIFICA_TIPOEXAMEN (MNOMBRE_EXAMEN IN VARCHAR2, MMUESTRA IN VARCHAR2, 
MDESCRIPCION IN VARCHAR2, MIDTIPOEXAMEN IN NUMBER)
AS
IMP VARCHAR2(30);
SIDS NUMBER(3);
BEGIN
  SELECT IDTIPOEXAMEN INTO SIDS FROM TIPO_EXAMEN WHERE IDTIPOEXAMEN = MIDTIPOEXAMEN;
    --DBMS_OUTPUT.PUT_LINE(SIDS);
  IF SIDS > 0 THEN
     UPDATE TIPO_EXAMEN SET NOMBRE_EXAMEN = MNOMBRE_EXAMEN, MUESTRA = MMUESTRA , DESCRIPCION = MDESCRIPCION 
  WHERE IDTIPOEXAMEN = MIDTIPOEXAMEN;
  IMP := (SQL%ROWCOUNT||' REGISTRO ACTULIZADO');
  DBMS_OUTPUT.PUT_LINE(IMP);
  ELSE
  DBMS_OUTPUT.PUT_LINE('NO SE PUEDE ACTUALIZAR EL REGISTRO');
  END IF;
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('ERROR AL ACTUALIZAR REGISTRO, NO EXISTE EL ID');
END;

EXECUTE MODIFICA_TIPOEXAMEN('SANGRE', 'GLUCOSA', 'EXAMEN DE SANGRE PARA SABER LA GLUCOSA', &IDTIPOEXAMEN);
SELECT * FROM TIPO_EXAMEN;

-- PROCEDIMIENTO ALMACENADO PARA ELIMINAR TIPO EXAMEN
CREATE OR REPLACE PROCEDURE ELIMINA_TIPOEXAMEN (ETIPO_EXAMEN IN NUMBER)
AS
IMP VARCHAR2(30);
BEGIN
  DELETE FROM TIPO_EXAMEN WHERE IDTIPOEXAMEN = ETIPO_EXAMEN;
  IMP := (SQL%ROWCOUNT||' REGISTRO ELIMINADO');
  DBMS_OUTPUT.PUT_LINE(IMP);
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('ERROR AL ELIMINAR REGISTRO');
END;

-- TRIGGER PARA TABLA ENCABEZADO EXAMEN AGREGAR
CREATE OR REPLACE TRIGGER TG_ENCABEZADOEXAMEN BEFORE INSERT 
ON ENCABEZADO_EXAMEN
FOR EACH ROW
BEGIN
  SELECT USER,SYSDATE INTO:NEW.USUARIO_CREO,:NEW.FECHA_CREO
  FROM DUAL;
END;

-- TRIGGER PARA TABLA ENCABEZADO EXAMEN MODIFICAR
CREATE OR REPLACE TRIGGER TG_UENCABEZADOEXAMEN BEFORE UPDATE
ON ENCABEZADO_EXAMEN
FOR EACH ROW
BEGIN
  SELECT USER,SYSDATE INTO:NEW.USUARIO_MODI,:NEW.FECHA_MODI
  FROM DUAL;
END;

-- PROCEDIMIENTO ALMACENADO PARA AGREGAR ENCABEZADO EXAMEN
CREATE OR REPLACE PROCEDURE ADICIONA_ENCABEZADOEXAMEN (AIDENCABEZADOEXA IN NUMBER, ADESCRIPCION IN VARCHAR2) AS
IMP VARCHAR2(30);
BEGIN
  INSERT INTO ENCABEZADO_EXAMEN (IDENCABEZADOEXA, DESCRIPCION) 
  VALUES (AIDENCABEZADOEXA, ADESCRIPCION);
  IMP := (SQL%ROWCOUNT||' REGISTRO INSERTADO');
  DBMS_OUTPUT.PUT_LINE(IMP);
EXCEPTION
  WHEN DUP_VAL_ON_INDEX THEN
    DBMS_OUTPUT.PUT_LINE('NO SE PUEDE INSERTAR EL MISMO ID');
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('ERROR AL INSERTAR REGISTRO');
END;

-- PROCEDIMIENTO ALMACENADO PARA MODIFICAR ENCABEZADO EXAMEN
CREATE OR REPLACE PROCEDURE MODIFICA_ENCABEZADOEXAMEN (MDESCRIPCION IN VARCHAR2, MIDENCABEZADOEXA IN NUMBER)AS
IMP VARCHAR2(30);
SIDS NUMBER(3);
BEGIN
  SELECT IDENCABEZADOEXA INTO SIDS FROM ENCABEZADO_EXAMEN WHERE IDENCABEZADOEXA = MIDENCABEZADOEXA;
    --DBMS_OUTPUT.PUT_LINE(SIDS);
  IF SIDS = MIDENCABEZADOEXA THEN
  UPDATE ENCABEZADO_EXAMEN SET DESCRIPCION = MDESCRIPCION WHERE IDENCABEZADOEXA = MIDENCABEZADOEXA;
  IMP := (SQL%ROWCOUNT||' REGISTRO ACTULIZADO');
  DBMS_OUTPUT.PUT_LINE(IMP);
  ELSE 
  DBMS_OUTPUT.PUT_LINE('ERROR AL ACTUALIZAR REGISTRO, NO EXISTE EL ID');
  END IF;
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('ERROR AL ACTUALIZAR REGISTRO, NO EXISTE EL ID');
END;

-- PROCEDIMIENTO ALMACENADO PARA ELIMINAR ENCABEZADO EXAMEN
CREATE OR REPLACE PROCEDURE ELIMINA_ENCABEZADOEXAMEN (EIDENCABEZADOEXA IN NUMBER) AS
IMP VARCHAR2(30);
BEGIN
  DELETE FROM ENCABEZADO_EXAMEN WHERE IDENCABEZADOEXA = EIDENCABEZADOEXA;
  IMP := (SQL%ROWCOUNT||' REGISTRO ELIMINADO');
  DBMS_OUTPUT.PUT_LINE(IMP);
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('ERROR AL ELIMINAR REGISTRO');
END;

-- TABLAS TRANSACCIONALES
-- TRIGGER PARA TABLA EXAMENES REALIZADOS
CREATE OR REPLACE TRIGGER TG_EXAMENREALIZADOS BEFORE INSERT 
ON EXAMENESREALIZADOS
FOR EACH ROW
BEGIN
  SELECT USER,SYSDATE INTO:NEW.USUARIO_CREO,:NEW.FECHA_CREO
  FROM DUAL;
END;

-- TRIGGER PARA TABLA EXAMENES REALIZADOS
CREATE OR REPLACE TRIGGER TG_UEXAMENREALIZADOS BEFORE UPDATE 
ON EXAMENESREALIZADOS
FOR EACH ROW
BEGIN
  SELECT USER,SYSDATE INTO:NEW.USUARIO_MODI,:NEW.FECHA_MODI
  FROM DUAL;
END;

-- PROCEDIMIENTO ALMACENADO
CREATE OR REPLACE PROCEDURE ADICIONA_EXAMENREALIZADOS IS
IMP VARCHAR2(30);
BEGIN
  INSERT INTO EXAMENESREALIZADOS (IDEXAMEN_REALIZADO, DUI, IDTIPOEXAMEN, FECHA, PRECIO) 
  VALUES (1, '01056166-0', 1, '22-03-2019', 4.50);
  IMP := (SQL%ROWCOUNT||' REGISTRO INSERTADO');
  DBMS_OUTPUT.PUT_LINE(IMP);
EXCEPTION 
  WHEN DUP_VAL_ON_INDEX THEN
    DBMS_OUTPUT.PUT_LINE('NO SE PUEDE INSERTAR EL MISMO ID');
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('ERROR AL INSERTAR REGISTRO');
END;

EXECUTE ADICIONA_EXAMENREALIZADOS;
SELECT * FROM EXAMENESREALIZADOS;

-- PROCEDIMIENTO ALMACENADO PARA MODIFICAR EXAMEN REALIZADO
CREATE OR REPLACE PROCEDURE MODIFICA_EXAMENREALIZADO IS
IMP VARCHAR2(30);
BEGIN
  UPDATE EXAMENESREALIZADOS SET IDTIPOEXAMEN = 2, FECHA = '23-03-2019' WHERE IDEXAMEN_REALIZADO = 1;
  IMP := (SQL%ROWCOUNT||' REGISTRO ACTULIZADO');
  DBMS_OUTPUT.PUT_LINE(IMP);
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('ERROR AL ACTUALIZAR REGISTRO');
END;

-- PROCEDIMIENTO ALMACENADO PARA ELIMINAR EXAMEN REALIZADO
CREATE OR REPLACE PROCEDURE ELIMINA_EXAMENREALIZADO IS
IMP VARCHAR2(30);
BEGIN
  DELETE FROM EXAMENESREALIZADOS WHERE IDEXAMEN_REALIZADO = 1;
  IMP := (SQL%ROWCOUNT||' REGISTRO ELIMINADO');
  DBMS_OUTPUT.PUT_LINE(IMP);
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('ERROR AL ELIMINAR REGISTRO');
END;


-- TRIGGER DE AGREGAR PARA TABLA DETALLE_TIPOEXA
CREATE OR REPLACE TRIGGER TG_DETALLE_TIPOEXA
BEFORE INSERT 
ON DETALLE_TIPOEXA 
FOR EACH ROW
BEGIN
  SELECT USER,SYSDATE INTO:NEW.USUARIO_CREO,:NEW.FECHA_CREO
  FROM DUAL;
END;

-- TRIGGER DE ACTUALIZAR PARA TABLA DETALLE_TIPOEXA 
CREATE OR REPLACE TRIGGER TG_UDETALLE_TIPOEXA BEFORE UPDATE 
ON DETALLE_TIPOEXA
FOR EACH ROW
BEGIN
  SELECT USER,SYSDATE INTO:NEW.USUARIO_MODI,:NEW.FECHA_MODI
  FROM DUAL;
END;

-- PROCEDIMIENTO ALMACENADO AGREGAR DETALLE_TIPOEXA
CREATE OR REPLACE PROCEDURE ADICIONA_DETALLE_TIPOEXA (AID_DETALLETIPO IN NUMBER, AIDTIPOEXAMEN IN NUMBER, ACAMPO_EXAMEN IN VARCHAR2, 
AREQUIERE_VALOR IN VARCHAR2, AVALORNORMAL IN VARCHAR2)
AS
IMP VARCHAR2(30);
SIDS NUMBER(3);
BEGIN
  SELECT IDTIPOEXAMEN INTO SIDS FROM TIPO_EXAMEN WHERE IDTIPOEXAMEN = AIDTIPOEXAMEN;
    --IF SIDS = NULL
   -- THEN
      DBMS_OUTPUT.PUT_LINE('NO SE PUEDE INSERTAR EL REGISTRO, NO EXISTE EL TIPO DE EXAMEN');
    --ELSE
      INSERT INTO DETALLE_TIPOEXA (ID_DETALLETIPO, IDTIPOEXAMEN, CAMPO_EXAMEN, REQUIERE_VALOR, VALORNORMAL) 
      VALUES (AID_DETALLETIPO, AIDTIPOEXAMEN, ACAMPO_EXAMEN, AREQUIERE_VALOR, AVALORNORMAL);
      IMP := (SQL%ROWCOUNT||' REGISTRO INSERTADO');
      DBMS_OUTPUT.PUT_LINE(IMP);
    --END IF;
EXCEPTION 
  WHEN DUP_VAL_ON_INDEX THEN
    DBMS_OUTPUT.PUT_LINE('NO SE PUEDE INSERTAR REGISTRO CON MISMO ID');
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('NO SE PUEDE INSERTAR EL REGISTRO, NO EXISTE EL TIPO DE EXAMEN');
END;

EXECUTE ADICIONA_DETALLE_TIPOEXA(&ID_DETALLETIPO, 2, 'GLOBULOS ROJOS', 'SI', 'VALORES');

SELECT * FROM DETALLE_TIPOEXA;

-- PROCEDIMIENTO ALMACENADO PARA MODIFICAR DETALLE_TIPOEXA
CREATE OR REPLACE PROCEDURE MODIFICA_DETALLE_TIPOEXA (MID_DETALLETIPO IN NUMBER, MIDTIPOEXAMEN IN NUMBER, MREQUIERE_VALOR IN VARCHAR2, MVALORNORMAL IN VARCHAR2)
AS
IMP VARCHAR2(30);
SIDS NUMBER(3);
BEGIN
  SELECT IDTIPOEXAMEN INTO SIDS FROM TIPO_EXAMEN WHERE IDTIPOEXAMEN = MIDTIPOEXAMEN;
 DBMS_OUTPUT.PUT_LINE(SIDS);
 IF SIDS IS NULL THEN
  DBMS_OUTPUT.PUT_LINE('NO HAY NADA CHELE');
 END IF;
  UPDATE DETALLE_TIPOEXA SET IDTIPOEXAMEN = MIDTIPOEXAMEN, REQUIERE_VALOR = MREQUIERE_VALOR, VALORNORMAL = MVALORNORMAL WHERE ID_DETALLETIPO = MID_DETALLETIPO;
  IMP := (SQL%ROWCOUNT||' REGISTRO ACTUALIZADO');
  --DBMS_OUTPUT.PUT_LINE('OK');
  DBMS_OUTPUT.PUT_LINE(IMP);
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    --RAISE_APPLICATION_ERROR (' ');
    DBMS_OUTPUT.PUT_LINE('NO EXISTE ESE TIPO DE EXAMEN');
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('ERROR AL ACTUALIZAR REGISTRO');
END;

EXECUTE MODIFICA_DETALLE_TIPOEXA (2, 10,'NO', 'LASKDJASLKDJ');

-- PROCEDIMIENTO ALMACENADO PARA ELIMINAR DETALLE_TIPOEXA
CREATE OR REPLACE PROCEDURE ELIMINA_DETALLE_TIPOEXA (EID_DETALLETIPO IN NUMBER) AS
IMP VARCHAR2(30);
BEGIN
  DELETE FROM DETALLE_TIPOEXA WHERE ID_DETALLETIPO = EID_DETALLETIPO;
  IMP := (SQL%ROWCOUNT||' REGISTRO ELIMINADO');
  DBMS_OUTPUT.PUT_LINE(IMP);
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('ERROR AL ELIMINAR REGISTRO');
END;

EXECUTE ELIMINA_DETALLE_TIPOEXA(4);

-- TRIGGER PARA AGREGAR CABECERA_HISTORIAL
CREATE OR REPLACE TRIGGER TG_CABECERA_HISTORIAL
BEFORE INSERT 
ON CABECERA_HISTORIAL 
FOR EACH ROW
BEGIN
  SELECT USER,SYSDATE INTO:NEW.USUARIO_CREO,:NEW.FECHA_CREO
  FROM DUAL;
END;

-- TRIGGER DE ACTUALIZAR PARA TABLA CABECERA_HISTORIAL
CREATE OR REPLACE TRIGGER TG_UCABECERA_HISTORIAL BEFORE UPDATE 
ON CABECERA_HISTORIAL
FOR EACH ROW
BEGIN
  SELECT USER,SYSDATE INTO:NEW.USUARIO_MODI,:NEW.FECHA_MODI
  FROM DUAL;
END;

-- PROCEDIMIENTO ALMACENADO AGREGAR CABECERA_HISTORIAL
CREATE OR REPLACE PROCEDURE ADICIONA_CABECERA_HISTORIAL IS
IMP VARCHAR2(30);
BEGIN
  INSERT INTO CABECERA_HISTORIAL (IDCABECERA, DUI, FECHA_APERTURA) 
  VALUES (1, '01056166-0', '21-03-2019');
  IMP := (SQL%ROWCOUNT||' REGISTRO INSERTADO');
  DBMS_OUTPUT.PUT_LINE(IMP);
EXCEPTION 
  WHEN DUP_VAL_ON_INDEX THEN
    DBMS_OUTPUT.PUT_LINE('NO SE PUEDE INSERTAR REGISTRO CON MISMO ID');
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('ERROR AL INSERTAR REGISTRO');
END;

-- PROCEDIMIENTO ALMACENADO PARA MODIFICAR CABECERA_HISTORIAL
CREATE OR REPLACE PROCEDURE MODIFICA_CABECERA_HISTORIAL IS
IMP VARCHAR2(30);
BEGIN
  UPDATE CABECERA_HISTORIAL SET FECHA_APERTURA = '20-03-2019' WHERE IDCABECERA = 1;
  IMP := (SQL%ROWCOUNT||' REGISTRO ACTULIZADO');
  DBMS_OUTPUT.PUT_LINE(IMP);
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('ERROR AL ACTUALIZAR REGISTRO');
END;

-- PROCEDIMIENTO ALMACENADO PARA ELIMINAR CABECERA_HISTORIAL
CREATE OR REPLACE PROCEDURE ELIMINA_CABECERA_HISTORIAL IS
IMP VARCHAR2(30);
BEGIN
  DELETE FROM CABECERA_HISTORIAL WHERE IDCABECERA = 1;
  IMP := (SQL%ROWCOUNT||' REGISTRO ELIMINADO');
  DBMS_OUTPUT.PUT_LINE(IMP);
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('ERROR AL ELIMINAR REGISTRO');
END;

-- TRIGGER PARA AGREGAR TABLA DETALLE_HISTORIAL
CREATE OR REPLACE TRIGGER TG_DETALLE_HISTORIAL
BEFORE INSERT 
ON DETALLE_HISTORIAL 
FOR EACH ROW
BEGIN
  SELECT USER,SYSDATE INTO:NEW.USUARIO_CREO,:NEW.FECHA_CREO
  FROM DUAL;
END;

-- TRIGGER DE ACTUALIZAR PARA TABLA DETALLE_HISTORIAL
CREATE OR REPLACE TRIGGER TG_UDETALLE_HISTORIAL BEFORE UPDATE 
ON DETALLE_HISTORIAL
FOR EACH ROW
BEGIN
  SELECT USER,SYSDATE INTO:NEW.USUARIO_MODI,:NEW.FECHA_MODI
  FROM DUAL;
END;

-- PROCEDIMIENTO ALMACENADO AGREGAR DETALLE_HISTORIAL
CREATE OR REPLACE PROCEDURE ADICIONA_DETALLE_HISTORIAL IS
IMP VARCHAR2(30);
BEGIN
  INSERT INTO DETALLE_HISTORIAL (ID_DETALLEHIST, IDCABECERA, DUI, FECHA_REALIZADO) 
  VALUES (1, 1, '01056166-0', '21-03-2019');
  IMP := (SQL%ROWCOUNT||' REGISTRO INSERTADO');
  DBMS_OUTPUT.PUT_LINE(IMP);
EXCEPTION 
  WHEN DUP_VAL_ON_INDEX THEN
    DBMS_OUTPUT.PUT_LINE('NO SE PUEDE INSERTAR REGISTRO CON MISMO ID');
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('ERROR AL INSERTAR REGISTRO');
END;

-- PROCEDIMIENTO ALMACENADO PARA MODIFICAR DETALLE_HISTORIAL
CREATE OR REPLACE PROCEDURE MODIFICA_DETALLE_HISTORIAL IS
IMP VARCHAR2(30);
BEGIN
  UPDATE DETALLE_HISTORIAL SET IDCABECERA = 2, FECHA_REALIZADO = '20-03-2019' WHERE ID_DETALLEHIST = 1;
  IMP := (SQL%ROWCOUNT||' REGISTRO ACTULIZADO');
  DBMS_OUTPUT.PUT_LINE(IMP);
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('ERROR AL ACTUALIZAR REGISTRO');
END;

-- PROCEDIMIENTO ALMACENADO PARA ELIMINAR DETALLE_HISTORIAL
CREATE OR REPLACE PROCEDURE ELIMINA_DETALLE_HISTORIAL IS
IMP VARCHAR2(30);
BEGIN
  DELETE FROM DETALLE_HISTORIAL WHERE ID_DETALLEHIST = 1;
  IMP := (SQL%ROWCOUNT||' REGISTRO ELIMINADO');
  DBMS_OUTPUT.PUT_LINE(IMP);
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('ERROR AL ELIMINAR REGISTRO');
END;

-- TRIGGER PARA AGREGAR TABLA DETALLE_EXAMEN_REALIZADO
CREATE OR REPLACE TRIGGER TG_DETALLE_EXAMEN_REALIZA
BEFORE INSERT 
ON DETALLE_EXAMEN_REALIZA
FOR EACH ROW
BEGIN
  SELECT USER,SYSDATE INTO:NEW.USUARIO_CREO,:NEW.FECHA_CREO
  FROM DUAL;
END;

-- TRIGGER DE ACTUALIZAR PARA TABLA DETALLE_EXAMEN_REALIZADO
CREATE OR REPLACE TRIGGER TG_UDETALLE_EXAMEN_REALIZA BEFORE UPDATE 
ON DETALLE_EXAMEN_REALIZA
FOR EACH ROW
BEGIN
  SELECT USER,SYSDATE INTO:NEW.USUARIO_MODI,:NEW.FECHA_MODI
  FROM DUAL;
END;

-- PROCEDIMIENTO ALMACENADO AGREGAR DETALLE_EXAMEN_REALIZA
CREATE OR REPLACE PROCEDURE ADICIONA_DETALLE_EXA_REAL IS
IMP VARCHAR2(30);
BEGIN
  INSERT INTO DETALLE_EXAMEN_REALIZA (ID_DETALLE, IDEXAMEN_REALIZADO, IDTIPOEXAMEN) 
  VALUES (1, 1, 1);
  IMP := (SQL%ROWCOUNT||' REGISTRO INSERTADO');
  DBMS_OUTPUT.PUT_LINE(IMP);
EXCEPTION 
  WHEN DUP_VAL_ON_INDEX THEN
    DBMS_OUTPUT.PUT_LINE('NO SE PUEDE INSERTAR REGISTRO CON MISMO ID');
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('ERROR AL INSERTAR REGISTRO');
END;

-- PROCEDIMIENTO ALMACENADO PARA MODIFICAR DETALLE_HISTORIAL
CREATE OR REPLACE PROCEDURE MODIFICA_DETALLE_EXA_REAL IS
IMP VARCHAR2(30);
BEGIN
  UPDATE DETALLE_EXAMEN_REALIZA SET IDEXAMEN_REALIZADO = 2, IDTIPOEXAMEN = 1 WHERE ID_DETALLE = 1;
  IMP := (SQL%ROWCOUNT||' REGISTRO ACTULIZADO');
  DBMS_OUTPUT.PUT_LINE(IMP);
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('ERROR AL ACTUALIZAR REGISTRO');
END;

-- PROCEDIMIENTO ALMACENADO PARA ELIMINAR DETALLE_HISTORIAL
CREATE OR REPLACE PROCEDURE ELIMINA_DETALLE_EXA_REAL IS
IMP VARCHAR2(30);
BEGIN
  DELETE FROM DETALLE_EXAMEN_REALIZA WHERE ID_DETALLE = 1;
  IMP := (SQL%ROWCOUNT||' REGISTRO ELIMINADO');
  DBMS_OUTPUT.PUT_LINE(IMP);
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('ERROR AL ELIMINAR REGISTRO');
END;